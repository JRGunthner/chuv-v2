#include "Flowmeter.h"

#include "stm32f0xx.h"
#include "stdio.h"
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"


#define N_FLOW 9

static uint32_t Frequency;
static uint32_t DutyCycle;

static uint8_t Flow;
static int8_t  FlowDerivative;

//==================================================================================================
//
//==================================================================================================
void Flowmeter_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	TIM_ICInitTypeDef  TIM_ICInitStructure;

	/* TIM2 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

	/* GPIOA clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);

	/* TIM2 chennel2 configuration : PA.01 */
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP ;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	/* Connect TIM pin to AF2 */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_2);

	/* Enable the TIM2 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);


	TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
	TIM_ICInitStructure.TIM_ICFilter = 0x0;

	TIM_PWMIConfig(TIM2, &TIM_ICInitStructure);

	/* Select the TIM2 Input Trigger: TI2FP2 */
	TIM_SelectInputTrigger(TIM2, TIM_TS_TI2FP2);

	/* Select the slave Mode: Reset Mode */
	TIM_SelectSlaveMode(TIM2, TIM_SlaveMode_Reset);
	TIM_SelectMasterSlaveMode(TIM2,TIM_MasterSlaveMode_Enable);

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);

	/* Enable the CC2 Interrupt Request */
	TIM_ITConfig(TIM2, TIM_IT_CC2, ENABLE);

	Frequency = 0;
	DutyCycle = 0;

	Flow = 0;
	FlowDerivative = 0;

}

//==================================================================================================
//
//==================================================================================================
void Flowmeter_FlowConversion()
{
	if(Frequency > 0)
	{
		//   +--------+-----------+
		//   | Liters | Frequency |
		//   +--------+-----------+
		//   |   10   |      3    |
		//   |   20   |      7    |
		//   |   30   |     10    |
		//   |   40   |     13    |
		//   |   50   |     16    |
		//   |   60   |     19    |
		//   |   70   |     22    |
		//   |   80   |     25    |
		//   |   90   |     28    |
		//   |   100  |     31    |
		//   +--------+-----------+

		// TODO: Fazer rotinas para calibracao - por hora esta fixo
		Flow = (0.3*Frequency) + 1;

	}
	else
	{
		Flow = 0;
	}
}

//==================================================================================================
//
//==================================================================================================
void Flowmeter_FlowDerivative()
{
	uint8_t i;

	static int8_t Derivative_Vector[N_FLOW+1];

	if ( Flow <  FLOW_ON )
	{
		FlowDerivative = 0;
	}
	else
	{
		for ( i=N_FLOW; i>=1; i--)
		{
			Derivative_Vector[i] = Derivative_Vector[i-1];
		}

		Derivative_Vector[0] = Flow * N_FLOW;

		FlowDerivative = 0;

		for ( i=N_FLOW; i>=1; i--)
		{
			FlowDerivative += (Derivative_Vector[i-1] - Derivative_Vector[i])/i;
		}

		FlowDerivative /= N_FLOW;
	}
}

//==================================================================================================
// Flowmeter
//==================================================================================================
void TIM2_IRQHandler (void)
{
	/* Clear TIM2 Capture compare interrupt pending bit */
	TIM_ClearITPendingBit(TIM2, TIM_IT_CC2);

	if (TIM2->CCR2 != 0)
	{
		/* Duty cycle computation */
		DutyCycle = (TIM_GetCapture1(TIM2) * 100) / TIM2->CCR2;

		/* Frequency computation */
		Frequency = SystemCoreClock / TIM2->CCR2;
	}
	else
	{
		DutyCycle = 0;
		Frequency = 0;
	}

	// TODO: Verificar se aqui eh o melhor lugar ou se devemos criar uma task
	Flowmeter_FlowConversion();
	Flowmeter_FlowDerivative();
}

//==================================================================================================
//
//==================================================================================================
uint8_t Flowmeter_GetFlow()
{
	return Flow;
}

//==================================================================================================
//
//==================================================================================================
int8_t Flowmeter_GetFlowDerivative()
{
	return FlowDerivative;
}

//==================================================================================================
//
//==================================================================================================
void Flowmeter_EnableIRQ (void)
{
	NVIC_EnableIRQ (TIM2_IRQn);
}

//==================================================================================================
//
//==================================================================================================
void Flowmeter_DisableIRQ (void)
{
	NVIC_DisableIRQ (TIM2_IRQn);
}




